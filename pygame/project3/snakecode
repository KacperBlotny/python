import pygame
import time
import random

pygame.init()

white = (255,255,255)
black = (0,0,0)
grey = (210, 210, 210)
red = (255,0,0)
green = (0,255,0)

display_width = 800
display_height  = 600

gameDisplay = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption('Fortnite v2')
icon = pygame.image.load('icon.png')
pygame.display.set_icon(icon)

img = pygame.image.load('snakehead.png')
appleimg = pygame.image.load('apple.png')

clock = pygame.time.Clock()

AppleThickness = 30
block_size = 20
FPS = 15

#direction = "right"

smallfont = pygame.font.SysFont("comicsansms", 25)
medfont = pygame.font.SysFont("comicsansms", 50)
largefont = pygame.font.SysFont("comicsansms", 80)

def pause():
    paused = True

    message_to_screen("Paused",
                      black,
                      -100,
                      size = "large")
    
    message_to_screen("Press c to continue or Q to quit.",
                      black,
                      25,
                      size = "small")

    pygame.display.update()
    
    while paused:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    paused = False

                elif event.key == pygame.K_q:
                    pygame.quit()
                    quit()

        #gameDisplay.fill(white)   # UNCOMMENT IF YOU WANT TO HAVE THE PAUSE ANOTHER SCREEN
        
        clock.tick(5)
    
def score(score):
    text = smallfont.render("Score: " + str(score), True, black)
    gameDisplay.blit(text, [0,0])

def randAppleGen():
    randAppleX = round(random.randrange(0, display_width - AppleThickness))#/10.0)*10.0
    randAppleY = round(random.randrange(0, display_height - AppleThickness))#/10.0)*10.0

    return randAppleX, randAppleY


    
def game_intro():

    intro = True

    while intro:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    intro = False
                if event.key == pygame.K_q:
                    pygame.quit()
                    quit()
                    
        
        gameDisplay.fill(white)
        message_to_screen("Fortnite v2!",
                          green,
                          -200,
                          "large")
        message_to_screen("After you jump out of the bus, eat as much apples as you can.",
                          black,
                          -30,
                          "small")

        message_to_screen("If you eat all the apple you win the Royale!",
                          black,
                          10,
                          "small")

        message_to_screen("If you run into yourself or the storm you die!",
                          black,
                          50,
                          "small")

        message_to_screen("Press C to jump or Q to ragequit.",
                          black,
                          140,
                          "small")

        message_to_screen("Press ESC if you want to pause the game",
                          black,
                          180,
                          "small")
        
        message_to_screen("of course you can't pause it, it is a Battle Royal you dumb!",
                          black,
                          220,
                          "small")

        message_to_screen("Press v to purchase V-bucks",
                          black,
                          260,
                          "small")
        

        pygame.display.update()
        clock.tick(15)

        
def snake(block_size, snakelist):

    if direction == "right":
        head = pygame.transform.rotate(img, 270)

    if direction == "left":
        head = pygame.transform.rotate(img, 90)

    if direction == "up":
        head = img

    if direction == "down":
        head = pygame.transform.rotate(img, 180)
        
    
    gameDisplay.blit(head, (snakelist[-1][0], snakelist[-1][1]))
    
    for XnY in snakelist[:-1]:
        pygame.draw.rect(gameDisplay, green, [XnY[0],XnY[1],block_size,block_size])

def text_objects(text,color,size):
    if size == "small":
        textSurface = smallfont.render(text, True, color)
    elif size == "medium":
        textSurface = medfont.render(text, True, color)
    elif size == "large":
        textSurface = largefont.render(text, True, color)

    
    return textSurface, textSurface.get_rect()
    
    
def message_to_screen(msg,color, y_displace=0, size = "small"):
    textSurf, textRect = text_objects(msg,color, size)
    textRect.center = (display_width / 2), (display_height / 2)+y_displace
    gameDisplay.blit(textSurf, textRect)


def gameLoop():
    global direction

    direction = 'right'
    
    gameExit = False
    gameOver = False

    lead_x = display_width/2
    lead_y = display_height/2

    lead_x_change = 10
    lead_y_change = 0

    snakeList = []
    snakeLength = 1

    randAppleX, randAppleY = randAppleGen()
    
    right = False
    left = False
    up = False
    down = False
    
    
    while not gameExit:

        if gameOver == True:
            message_to_screen("Game over",
                              red,
                              y_displace=-50,
                              size="large")
            
            message_to_screen("Press C to play again or Q to quit",
                              black,
                              50,
                              size="medium")
            pygame.display.update()

        while gameOver == True:

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    gameOver = False
                    gameExit = True
                    
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        gameExit = True
                        gameOver = False
                    if event.key == pygame.K_c:
                        gameLoop()

        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gameExit = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT and left == False:
                    direction = "left"
                    lead_x_change = -block_size
                    lead_y_change = 0
                    up = False
                    down = False
                    right = True                    
                elif event.key == pygame.K_RIGHT and right == False:
                    direction = "right"
                    lead_x_change = block_size
                    lead_y_change = 0
                    up = False
                    down = False
                    left = True  
                elif event.key == pygame.K_UP and up == False:
                    direction = "up"
                    lead_y_change = -block_size
                    lead_x_change = 0
                    left = False
                    right = False
                    down = True  
                elif event.key == pygame.K_DOWN and down == False:
                    direction = "down"
                    lead_y_change = block_size
                    lead_x_change = 0
                    left = False
                    right = False
                    up = True
                elif event.key == pygame.K_ESCAPE:
                    pause()

        if lead_x >= display_width or lead_x < 0 or lead_y >= display_height or lead_y < 0:
            gameOver = True
      

        lead_x += lead_x_change
        lead_y += lead_y_change
        
        gameDisplay.fill(white)

       
        #pygame.draw.rect(gameDisplay, red, [randAppleX, randAppleY, AppleThickness, AppleThickness])
        gameDisplay.blit(appleimg, (randAppleX, randAppleY))
        
        
        snakeHead = []
        snakeHead.append(lead_x)
        snakeHead.append(lead_y)
        snakeList.append(snakeHead)

        if len(snakeList) > snakeLength:
            del snakeList[0]

        for eachSegment in snakeList[:-1]:
            if eachSegment == snakeHead:
                gameOver = True

        
        snake(block_size, snakeList)

        score(snakeLength - 1)
        
        pygame.display.update()
        

        if lead_x > randAppleX and lead_x < randAppleX + AppleThickness or lead_x + block_size > randAppleX and lead_x + block_size < randAppleX + AppleThickness:

            if lead_y > randAppleY and lead_y < randAppleY + AppleThickness:
                randAppleX, randAppleY = randAppleGen()
                snakeLength += 1
                
            elif lead_y + block_size > randAppleY and lead_y + block_size < randAppleY + AppleThickness:
                randAppleX, randAppleY = randAppleGen()
                snakeLength += 1

            
            

        
            
        
        

        clock.tick(FPS)
        
    pygame.quit()
    quit()

game_intro()
gameLoop()
